<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///PlayerAttributes
hsp = 0; //horizontalspeed
vsp = 0; //verticalspeed
jsp = 4; //jumpspeed
msp = 5; //movespeed
grav = 0.2; //gravity applied to player object
pdirection = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///PlayerInput

//Assign Move Control
key_right = keyboard_check(vk_right);
key_left = -(keyboard_check(vk_left));
key_up = (keyboard_check(vk_up));
key_jump = (keyboard_check(vk_space));

//React to Controls
mdirection = key_left + key_right; //check move direction
hsp = mdirection * msp; //apply movespeed to move direction
if (vsp &lt; 10) vsp += grav; //fall to ground. //unsure about 10 comparison
if (mdirection != 0) image_xscale = mdirection; //flip sprite

if (place_meeting(x,y+1,obj_tile)) //check if ground is 1px below obj
{
    vsp = key_jump * -jsp
}
if (place_meeting(x+hsp,y,obj_tile)) //Check if tile is near obj_TILE
{
    while(!place_meeting(x+sign(hsp),y,obj_tile))//Let obj move within 1 px of tile
    {
        x += sign(hsp);
    }
    hsp = 0; //If obj collides, do not let it move further
}


//REPEAT for y direction
if (place_meeting(x,y+vsp,obj_tile))
{
    while(!place_meeting(x,y+sign(vsp),obj_tile))
    {
        y+=sign(vsp);
    }
    vsp = 0;
}

y += vsp;

if (place_meeting(x+hsp,y,obj_boundary)) //Check if tile is near obj_BOUNDARY
{
    while(!place_meeting(x+sign(hsp),y,obj_boundary))//Let obj move within 1 px of tile
    {
        x += sign(hsp);
    }
    hsp = 0; //If obj collides, do not let it move further
}
x+=hsp // Apply horizontal movement
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shoot
//SHOOT UP
key_z = keyboard_check_pressed(ord('Z')); //create Z input

if key_up &amp;&amp; key_z{ //Check if up and z are pressed
    projectile = instance_create(x,y+12,obj_projectile); //create projectile slightly higher
    projectile.direction = 90; //Rotate projectile directionup
    projectile.image_angle = 90; //Rotate image up
    projectile.speed = 15; //Set projecile speed
}


///SHOOT LEFT AND RIGHT
if key_z &amp;&amp; !key_up{
    projectile = instance_create(x,y,obj_projectile);
if(mdirection != 0){
    pdirection = mdirection} //Hold either -1 or 1 in new variable; Avoid 0 - sitting projectile
    projectile.direction = image_angle;
    //projectile.image_angle = image_angle; //Probably unncessary for now. 
    //Change angle of proj based on player angle which probably doesn't change
    projectile.speed = 15 * pdirection;//Change direction of projectile
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
